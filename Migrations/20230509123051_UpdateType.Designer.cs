// <auto-generated />
using System;
using Materialempfehlung.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Materialempfehlung.Migrations
{
    [DbContext(typeof(MaterialempfehlungContext))]
    [Migration("20230509123051_UpdateType")]
    partial class UpdateType
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BedingungMaterial", b =>
                {
                    b.Property<int>("BedingungenId")
                        .HasColumnType("int");

                    b.Property<int>("MaterialienId")
                        .HasColumnType("int");

                    b.HasKey("BedingungenId", "MaterialienId");

                    b.HasIndex("MaterialienId");

                    b.ToTable("BedingungMaterial");
                });

            modelBuilder.Entity("BesonderheitMaterial", b =>
                {
                    b.Property<int>("BesonderheitenId")
                        .HasColumnType("int");

                    b.Property<int>("MaterialienId")
                        .HasColumnType("int");

                    b.HasKey("BesonderheitenId", "MaterialienId");

                    b.HasIndex("MaterialienId");

                    b.ToTable("BesonderheitMaterial");
                });

            modelBuilder.Entity("DruckverfahrenMaterial", b =>
                {
                    b.Property<int>("DruckverfahrenId")
                        .HasColumnType("int");

                    b.Property<int>("MaterialienId")
                        .HasColumnType("int");

                    b.HasKey("DruckverfahrenId", "MaterialienId");

                    b.HasIndex("MaterialienId");

                    b.ToTable("DruckverfahrenMaterial");
                });

            modelBuilder.Entity("KategorieMaterial", b =>
                {
                    b.Property<int>("KategorienId")
                        .HasColumnType("int");

                    b.Property<int>("MaterialienId")
                        .HasColumnType("int");

                    b.HasKey("KategorienId", "MaterialienId");

                    b.HasIndex("MaterialienId");

                    b.ToTable("KategorieMaterial");
                });

            modelBuilder.Entity("KlebstoffMaterial", b =>
                {
                    b.Property<int>("KlebstoffeId")
                        .HasColumnType("int");

                    b.Property<int>("MaterialienId")
                        .HasColumnType("int");

                    b.HasKey("KlebstoffeId", "MaterialienId");

                    b.HasIndex("MaterialienId");

                    b.ToTable("KlebstoffMaterial");
                });

            modelBuilder.Entity("MaterialÄußerer_Einfluss", b =>
                {
                    b.Property<int>("MaterialienId")
                        .HasColumnType("int");

                    b.Property<int>("Äußere_EinflüsseId")
                        .HasColumnType("int");

                    b.HasKey("MaterialienId", "Äußere_EinflüsseId");

                    b.HasIndex("Äußere_EinflüsseId");

                    b.ToTable("MaterialÄußerer_Einfluss");
                });

            modelBuilder.Entity("Materialempfehlung.Models.Äußerer_Einfluss", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Bemerkung")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bezeichnung")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Erstellungsdatum")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Änderungsdatum")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("MEL_Äußerer_Einfluss", (string)null);
                });

            modelBuilder.Entity("Materialempfehlung.Models.Bedingung", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Bemerkung")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bezeichnung")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Erstellungsdatum")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Änderungsdatum")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("MEL_Bedingungen", (string)null);
                });

            modelBuilder.Entity("Materialempfehlung.Models.Besonderheit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Bemerkung")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bezeichnung")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Erstellungsdatum")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Änderungsdatum")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("MEL_Besonderheit", (string)null);
                });

            modelBuilder.Entity("Materialempfehlung.Models.Druckverfahren", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Bemerkung")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bezeichnung")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Erstellungsdatum")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Änderungsdatum")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("MEL_Druckverfahren", (string)null);
                });

            modelBuilder.Entity("Materialempfehlung.Models.Kategorie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Bemerkung")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bezeichnung")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Erstellungsdatum")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Änderungsdatum")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("MEL_Kategorien", (string)null);
                });

            modelBuilder.Entity("Materialempfehlung.Models.Klebstoff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Bemerkung")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bezeichnung")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Erstellungsdatum")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Änderungsdatum")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("MEL_Klebstoffe", (string)null);
                });

            modelBuilder.Entity("Materialempfehlung.Models.Material", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Artikelnummer_Carini")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Artikeltyp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bemerkung")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bezeichnung")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Dicke_mm")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Erstellungsdatum")
                        .HasColumnType("datetime2");

                    b.Property<string>("Grammgewicht")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Preis")
                        .HasColumnType("float");

                    b.Property<string>("Qualität")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Änderungsdatum")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Material");
                });

            modelBuilder.Entity("Materialempfehlung.Models.Oberfläche", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Bemerkung")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bezeichnung")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Erstellungsdatum")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Änderungsdatum")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("MEL_Oberflächen", (string)null);
                });

            modelBuilder.Entity("Materialempfehlung.Models.Oberfläche_Beschaffenheit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Bemerkung")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bezeichnung")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Erstellungsdatum")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Änderungsdatum")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("MEL_Oberfläche_Beschaffenheiten", (string)null);
                });

            modelBuilder.Entity("Materialempfehlung.Models.Oberfläche_Farbe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Bemerkung")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bezeichnung")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Erstellungsdatum")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Änderungsdatum")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("MEL_Oberfläche_Farben", (string)null);
                });

            modelBuilder.Entity("Materialempfehlung.Models.Oberfläche_Form", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Bemerkung")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bezeichnung")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Erstellungsdatum")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Änderungsdatum")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("MEL_Oberfläche_Formen", (string)null);
                });

            modelBuilder.Entity("Materialempfehlung.Models.Oberfläche_Zustand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Bemerkung")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bezeichnung")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Erstellungsdatum")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Änderungsdatum")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("MEL_Oberfläche_Zustände", (string)null);
                });

            modelBuilder.Entity("MaterialOberfläche", b =>
                {
                    b.Property<int>("MaterialienId")
                        .HasColumnType("int");

                    b.Property<int>("OberflächenId")
                        .HasColumnType("int");

                    b.HasKey("MaterialienId", "OberflächenId");

                    b.HasIndex("OberflächenId");

                    b.ToTable("MaterialOberfläche");
                });

            modelBuilder.Entity("MaterialOberfläche_Beschaffenheit", b =>
                {
                    b.Property<int>("MaterialienId")
                        .HasColumnType("int");

                    b.Property<int>("Oberfläche_BeschaffenheitenId")
                        .HasColumnType("int");

                    b.HasKey("MaterialienId", "Oberfläche_BeschaffenheitenId");

                    b.HasIndex("Oberfläche_BeschaffenheitenId");

                    b.ToTable("MaterialOberfläche_Beschaffenheit");
                });

            modelBuilder.Entity("MaterialOberfläche_Farbe", b =>
                {
                    b.Property<int>("MaterialienId")
                        .HasColumnType("int");

                    b.Property<int>("Oberfläche_FarbenId")
                        .HasColumnType("int");

                    b.HasKey("MaterialienId", "Oberfläche_FarbenId");

                    b.HasIndex("Oberfläche_FarbenId");

                    b.ToTable("MaterialOberfläche_Farbe");
                });

            modelBuilder.Entity("MaterialOberfläche_Form", b =>
                {
                    b.Property<int>("MaterialienId")
                        .HasColumnType("int");

                    b.Property<int>("Oberfläche_FormenId")
                        .HasColumnType("int");

                    b.HasKey("MaterialienId", "Oberfläche_FormenId");

                    b.HasIndex("Oberfläche_FormenId");

                    b.ToTable("MaterialOberfläche_Form");
                });

            modelBuilder.Entity("MaterialOberfläche_Zustand", b =>
                {
                    b.Property<int>("MaterialienId")
                        .HasColumnType("int");

                    b.Property<int>("Oberfläche_ZuständeId")
                        .HasColumnType("int");

                    b.HasKey("MaterialienId", "Oberfläche_ZuständeId");

                    b.HasIndex("Oberfläche_ZuständeId");

                    b.ToTable("MaterialOberfläche_Zustand");
                });

            modelBuilder.Entity("BedingungMaterial", b =>
                {
                    b.HasOne("Materialempfehlung.Models.Bedingung", null)
                        .WithMany()
                        .HasForeignKey("BedingungenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Materialempfehlung.Models.Material", null)
                        .WithMany()
                        .HasForeignKey("MaterialienId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BesonderheitMaterial", b =>
                {
                    b.HasOne("Materialempfehlung.Models.Besonderheit", null)
                        .WithMany()
                        .HasForeignKey("BesonderheitenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Materialempfehlung.Models.Material", null)
                        .WithMany()
                        .HasForeignKey("MaterialienId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DruckverfahrenMaterial", b =>
                {
                    b.HasOne("Materialempfehlung.Models.Druckverfahren", null)
                        .WithMany()
                        .HasForeignKey("DruckverfahrenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Materialempfehlung.Models.Material", null)
                        .WithMany()
                        .HasForeignKey("MaterialienId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KategorieMaterial", b =>
                {
                    b.HasOne("Materialempfehlung.Models.Kategorie", null)
                        .WithMany()
                        .HasForeignKey("KategorienId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Materialempfehlung.Models.Material", null)
                        .WithMany()
                        .HasForeignKey("MaterialienId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("KlebstoffMaterial", b =>
                {
                    b.HasOne("Materialempfehlung.Models.Klebstoff", null)
                        .WithMany()
                        .HasForeignKey("KlebstoffeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Materialempfehlung.Models.Material", null)
                        .WithMany()
                        .HasForeignKey("MaterialienId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MaterialÄußerer_Einfluss", b =>
                {
                    b.HasOne("Materialempfehlung.Models.Material", null)
                        .WithMany()
                        .HasForeignKey("MaterialienId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Materialempfehlung.Models.Äußerer_Einfluss", null)
                        .WithMany()
                        .HasForeignKey("Äußere_EinflüsseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MaterialOberfläche", b =>
                {
                    b.HasOne("Materialempfehlung.Models.Material", null)
                        .WithMany()
                        .HasForeignKey("MaterialienId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Materialempfehlung.Models.Oberfläche", null)
                        .WithMany()
                        .HasForeignKey("OberflächenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MaterialOberfläche_Beschaffenheit", b =>
                {
                    b.HasOne("Materialempfehlung.Models.Material", null)
                        .WithMany()
                        .HasForeignKey("MaterialienId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Materialempfehlung.Models.Oberfläche_Beschaffenheit", null)
                        .WithMany()
                        .HasForeignKey("Oberfläche_BeschaffenheitenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MaterialOberfläche_Farbe", b =>
                {
                    b.HasOne("Materialempfehlung.Models.Material", null)
                        .WithMany()
                        .HasForeignKey("MaterialienId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Materialempfehlung.Models.Oberfläche_Farbe", null)
                        .WithMany()
                        .HasForeignKey("Oberfläche_FarbenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MaterialOberfläche_Form", b =>
                {
                    b.HasOne("Materialempfehlung.Models.Material", null)
                        .WithMany()
                        .HasForeignKey("MaterialienId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Materialempfehlung.Models.Oberfläche_Form", null)
                        .WithMany()
                        .HasForeignKey("Oberfläche_FormenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MaterialOberfläche_Zustand", b =>
                {
                    b.HasOne("Materialempfehlung.Models.Material", null)
                        .WithMany()
                        .HasForeignKey("MaterialienId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Materialempfehlung.Models.Oberfläche_Zustand", null)
                        .WithMany()
                        .HasForeignKey("Oberfläche_ZuständeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
